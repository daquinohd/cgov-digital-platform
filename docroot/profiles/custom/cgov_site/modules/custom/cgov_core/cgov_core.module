<?php

/**
 * @file
 * Contains cgov_core.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Block\BlockPluginInterface;

/**
 * Implements hook_entity_translation_create().
 *
 * Corrects the initial moderation state for a new translation.
 * The hook is called when a new translation is created, giving us
 * the opportunity to modify the object for that translation. We're
 * setting the initial moderation state for the translation, and
 * that in turn is used by the logic which determines which states
 * are available when the new translation is save. The bug for which
 * this workaround is implemented just copies the initial state from
 * the current state of the original language. When the Drupal core
 * team fixes https://www.drupal.org/project/drupal/issues/3021222,
 * this workaround can be removed.
 *
 * See https://github.com/NCIOCPL/cgov-digital-platform/issues/371
 * for more details about the bug and exactly what the software is
 * doing.
 *
 * @var Drupal\Core\Entity\EntityInterface $translation
 *   The entity object for the new translation of a content object.
 */
function cgov_core_entity_translation_create(EntityInterface $translation) {
  $serviceName = 'content_moderation.moderation_information';
  $moderationInformation = \Drupal::service($serviceName);
  if ($moderationInformation->isModeratedEntity($translation)) {
    $workflow = $moderationInformation->getWorkflowForEntity($translation);
    $configuration = $workflow->getTypePlugin()->getConfiguration();
    $state = 'draft';
    if (!empty($configuration['default_moderation_state'])) {
      $state = $configuration['default_moderation_state'];
    }
    $translation->moderation_state = $state;
  }
}

/**
 * Implements hook_block_build_alter().
 *
 * Set cache context of blocks that vary by url, user, etc.
 */
function cgov_core_block_build_alter(array &$build, BlockPluginInterface $block) {
  // Get name of block's label (will be of
  // originally-created block if translations exist).
  $block_label = $block->getPluginDefinition()['admin_label'];

  // Add the 'url' cache context to page-specific blocks.
  if (strpos($block_label, 'Public Use') === 0) {
    $build['#cache']['contexts'][] = 'url';

    // Add the 'node' cache context so node updates are caught.
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'entity.node.canonical') {
      // Store the NID of the current node.
      $nid = \Drupal::routeMatch()->getRawParameter('node');
      $build['#cache']['tags'][] = "node:$nid";
    }
    // If not the node view page (eg: Preview or Latest) don't cache block.
    else {
      $build['#cache']['max_age'] = 0;
    }
  }
}

/**
 * Implements hook_node_access().
 */
function cgov_core_node_access(NodeInterface $node, $op, AccountInterface $account) {
  $publish_permission = 'use editorial_workflow transition publish';
  switch ($op) {

    // Currently we only have something to say about deletions.
    case 'delete':

      // Only weigh in for content controlled by `editorial_workflow`.
      $entityTypeManager = \Drupal::service('entity_type.manager');
      $workflows = $entityTypeManager->getStorage('workflow')->loadMultiple();
      $workflow = $workflows['editorial_workflow'];
      $typePlugin = $workflow->getTypePlugin();
      if (!$typePlugin->appliesToEntityTypeAndBundle('node', $node->bundle())) {
        break;
      }

      // Authors can only delete nodes in the `draft` state, and only if the
      // node has never been published.
      $state = $node->moderation_state->value;
      if (!$account->hasPermission($publish_permission)) {
        $reason = 'Authors not allowed to delete content ';
        if ($state !== 'draft') {
          $reason .= "in '$state' moderation state";
          return AccessResult::forbidden($reason);
        }
        $query = \Drupal::database()->select('node_field_revision', 'r');
        $query->condition('r.status', 1);
        $query->condition('r.nid', $node->id());
        if ($query->countQuery()->execute()->fetchField() > 0) {
          $reason .= 'which has ever been published';
          return AccessResult::forbidden($reason);
        }
      }
      else {

        // Editors can also delete nodes which are in the `archived` state.
        if ($state !== 'draft' && $state !== 'archived') {
          $reason = "Content in '$state' moderation state cannot be deleted";
          return AccessResult::forbidden($reason);
        }
      }
      break;

    // Let other modules weigh in for nodes whose deletion we haven't vetoed.
    default:
      return AccessResult::neutral();
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * Validates that the PubMed ID Field on Citations
 * matches the required pattern.
 */
function cgov_core_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if (($bundle == 'cgov_citation') && !empty($fields['field_pubmed_id'])) {
    $fields['field_pubmed_id']->setPropertyConstraints('value', [
      'Regex' => [
        'pattern' => '/^[0-9]*$/',
        'message' => 'The PubMed ID field only accepts numbers.',
      ],
    ]
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Limits allowed text formats using the cgov_util form_tools service.
 */
function cgov_core_field_widget_form_alter(&$element, $form_state, $context) {
  // Maps field names to an array containing a single format.
  $map = [
    'field_citation_content' => ['streamlined'],
    'field_intro_text' => ['streamlined'],
    'body' => ['full_html'],
  ];
  $formHelper = \Drupal::service('cgov_util.form_tools');
  $formHelper->allowTextFormats($map, $element, $context);
}

/**
 * Implements hook_entity_presave().
 *
 * When a user is initially created, default the preferred
 * language for the UI pages to English.
 */
function cgov_core_user_presave(EntityInterface $entity) {
  if ($entity->isNew()) {
    $entity->set('preferred_admin_langcode', 'en');
  }
}
